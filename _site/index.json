{
  "README.html": {
    "href": "README.html",
    "title": "Azorian | Azorian",
    "summary": "Azorian"
  },
  "api/Azorian.Controllers.AuthController.html": {
    "href": "api/Azorian.Controllers.AuthController.html",
    "title": "Class AuthController | Azorian",
    "summary": "Class AuthController Namespace Azorian.Controllers Assembly Azorian.dll Authentication endpoints for registering and logging in users. [ApiController] [Route(\"1/[controller]\")] public class AuthController : ControllerBase Inheritance object ControllerBase AuthController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthController(AzorianContext, TokenService) Initializes a new instance of the AuthController class. public AuthController(AzorianContext context, TokenService tokenService) Parameters context AzorianContext Database context. tokenService TokenService JWT generation service. Methods Login(LoginRequest) Authenticates a user and returns a JWT. [HttpPost(\"login\")] [AllowAnonymous] [ProducesResponseType(typeof(string), 200)] [ProducesResponseType(401)] public Task<ActionResult<string>> Login(LoginRequest request) Parameters request LoginRequest Login request payload. Returns Task<ActionResult<string>> JWT for the authenticated user. Register(RegisterRequest) Registers a new user and returns a JWT. [HttpPost(\"register\")] [AllowAnonymous] [ProducesResponseType(typeof(string), 200)] [ProducesResponseType(400)] public Task<ActionResult<string>> Register(RegisterRequest request) Parameters request RegisterRequest Registration request payload. Returns Task<ActionResult<string>> JWT for the created user."
  },
  "api/Azorian.Controllers.TextController.html": {
    "href": "api/Azorian.Controllers.TextController.html",
    "title": "Class TextController | Azorian",
    "summary": "Class TextController Namespace Azorian.Controllers Assembly Azorian.dll API controller for text processing operations. [ApiController] [Route(\"[controller]\")] public class TextController : ControllerBase Inheritance object ControllerBase TextController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextController(TextProcessor) Initializes a new instance of the TextController class. public TextController(TextProcessor processor) Parameters processor TextProcessor Injected text processor service. Methods Reverse(ReverseTextRequest) Reverses the input text provided in the POST body. [HttpPost(\"reverse\")] [ProducesResponseType(typeof(ReverseTextResponse), 200)] [ProducesResponseType(400)] public IActionResult Reverse(ReverseTextRequest request) Parameters request ReverseTextRequest The request payload containing input text. Returns IActionResult A ReverseTextResponse with reversed text."
  },
  "api/Azorian.Controllers.UsersController.html": {
    "href": "api/Azorian.Controllers.UsersController.html",
    "title": "Class UsersController | Azorian",
    "summary": "Class UsersController Namespace Azorian.Controllers Assembly Azorian.dll BREAD operations for user accounts. [ApiController] [Route(\"1/[controller]\")] [Authorize] public class UsersController : ControllerBase Inheritance object ControllerBase UsersController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UsersController(AzorianContext) Initializes a new instance of the UsersController class. public UsersController(AzorianContext context) Parameters context AzorianContext Database context. Methods Add(RegisterRequest) Add a new user. [HttpPost] [Authorize(Roles = \"Admin\")] [ProducesResponseType(typeof(User), 201)] public Task<ActionResult<User>> Add(RegisterRequest request) Parameters request RegisterRequest User details. Returns Task<ActionResult<User>> The created user. Ban(Guid) Ban a user. [HttpPost(\"{id}/ban\")] [Authorize(Roles = \"Admin\")] [ProducesResponseType(204)] [ProducesResponseType(404)] public Task<IActionResult> Ban(Guid id) Parameters id Guid User identifier. Returns Task<IActionResult> Browse() Browse all users. [HttpGet] [Authorize(Roles = \"Admin\")] [ProducesResponseType(typeof(IEnumerable<User>), 200)] public Task<ActionResult<IEnumerable<User>>> Browse() Returns Task<ActionResult<IEnumerable<User>>> Collection of users. Delete(Guid) Delete a user. [HttpDelete(\"{id}\")] [Authorize(Roles = \"Admin\")] [ProducesResponseType(204)] [ProducesResponseType(404)] public Task<IActionResult> Delete(Guid id) Parameters id Guid User identifier. Returns Task<IActionResult> Edit(Guid, User) Edit an existing user. [HttpPut(\"{id}\")] [Authorize(Roles = \"Admin\")] [ProducesResponseType(204)] [ProducesResponseType(404)] public Task<IActionResult> Edit(Guid id, User update) Parameters id Guid User identifier. update User Updated user details. Returns Task<IActionResult> Read(Guid) Read a specific user by identifier. [HttpGet(\"{id}\")] [ProducesResponseType(typeof(User), 200)] [ProducesResponseType(404)] public Task<ActionResult<User>> Read(Guid id) Parameters id Guid User identifier. Returns Task<ActionResult<User>> User matching the identifier. Suspend(Guid) Suspend a user. [HttpPost(\"{id}/suspend\")] [Authorize(Roles = \"Admin\")] [ProducesResponseType(204)] [ProducesResponseType(404)] public Task<IActionResult> Suspend(Guid id) Parameters id Guid User identifier. Returns Task<IActionResult>"
  },
  "api/Azorian.Controllers.WeatherForecastController.html": {
    "href": "api/Azorian.Controllers.WeatherForecastController.html",
    "title": "Class WeatherForecastController | Azorian",
    "summary": "Class WeatherForecastController Namespace Azorian.Controllers Assembly Azorian.dll Provides HTTP endpoints for retrieving weather forecast data. [ApiController] [Route(\"1/[controller]\")] public class WeatherForecastController : ControllerBase Inheritance object ControllerBase WeatherForecastController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Namespace: Azorian.Controllers Inheritance: ControllerBase Attributes: ApiController (marks this class as an API controller), Route(\"1/[controller]\") (maps route prefix based on controller name). Routes for this controller: GET http://localhost:5197/1/WeatherForecast Constructors WeatherForecastController(ILogger<WeatherForecastController>) Initializes a new instance of the WeatherForecastController class. public WeatherForecastController(ILogger<WeatherForecastController> logger) Parameters logger ILogger<WeatherForecastController> Logger instance used to record diagnostic information. Methods Get() Handles GET requests to /1/WeatherForecast. [HttpGet(Name = \"GetWeatherForecast\")] public IEnumerable<WeatherForecast> Get() Returns IEnumerable<WeatherForecast> A collection of WeatherForecast objects for the next five days. Remarks Behavior: Generates a forecast for the next 5 days. Each forecast contains: Date – a DateOnly for the forecasted day. TemperatureC – randomized Celsius temperature between -20 and 55. Summary – a random descriptive summary from Azorian.Controllers.WeatherForecastController.Summaries. Example request: GET http://localhost:5197/1/WeatherForecast Example response: [ { \"date\": \"2025-09-14\", \"temperatureC\": 25, \"summary\": \"Warm\" }, { \"date\": \"2025-09-15\", \"temperatureC\": 17, \"summary\": \"Mild\" } ]"
  },
  "api/Azorian.Controllers.html": {
    "href": "api/Azorian.Controllers.html",
    "title": "Namespace Azorian.Controllers | Azorian",
    "summary": "Namespace Azorian.Controllers Classes AuthController Authentication endpoints for registering and logging in users. UsersController BREAD operations for user accounts. WeatherForecastController Provides HTTP endpoints for retrieving weather forecast data."
  },
  "api/Azorian.Data.AzorianContext.html": {
    "href": "api/Azorian.Data.AzorianContext.html",
    "title": "Class AzorianContext | Azorian",
    "summary": "Class AzorianContext Namespace Azorian.Data Assembly Azorian.dll Entity Framework database context for the Azorian application. public class AzorianContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext AzorianContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AzorianContext(DbContextOptions<AzorianContext>) Initializes a new instance of the AzorianContext class. public AzorianContext(DbContextOptions<AzorianContext> options) Parameters options DbContextOptions<AzorianContext> The options to configure the context. Properties Users Gets or sets user accounts. public DbSet<User> Users { get; } Property Value DbSet<User>"
  },
  "api/Azorian.Data.Migrations.AddBanSuspendFields.html": {
    "href": "api/Azorian.Data.Migrations.AddBanSuspendFields.html",
    "title": "Class AddBanSuspendFields | Azorian",
    "summary": "Class AddBanSuspendFields Namespace Azorian.Data.Migrations Assembly Azorian.dll A base class inherited by each EF Core migration. [DbContext(typeof(AzorianContext))] [Migration(\"20250913210136_AddBanSuspendFields\")] public class AddBanSuspendFields : Migration Inheritance object Migration AddBanSuspendFields Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Azorian.Data.Migrations.CreateUsers.html": {
    "href": "api/Azorian.Data.Migrations.CreateUsers.html",
    "title": "Class CreateUsers | Azorian",
    "summary": "Class CreateUsers Namespace Azorian.Data.Migrations Assembly Azorian.dll A base class inherited by each EF Core migration. [DbContext(typeof(AzorianContext))] [Migration(\"20250913202311_CreateUsers\")] public class CreateUsers : Migration Inheritance object Migration CreateUsers Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Azorian.Data.Migrations.html": {
    "href": "api/Azorian.Data.Migrations.html",
    "title": "Namespace Azorian.Data.Migrations | Azorian",
    "summary": "Namespace Azorian.Data.Migrations Classes AddBanSuspendFields A base class inherited by each EF Core migration. CreateUsers A base class inherited by each EF Core migration."
  },
  "api/Azorian.Data.html": {
    "href": "api/Azorian.Data.html",
    "title": "Namespace Azorian.Data | Azorian",
    "summary": "Namespace Azorian.Data Classes AzorianContext Entity Framework database context for the Azorian application."
  },
  "api/Azorian.Models.LoginRequest.html": {
    "href": "api/Azorian.Models.LoginRequest.html",
    "title": "Class LoginRequest | Azorian",
    "summary": "Class LoginRequest Namespace Azorian.Models Assembly Azorian.dll Login request payload. public class LoginRequest Inheritance object LoginRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Email address. [Required] [EmailAddress] public string Email { get; set; } Property Value string Password Password. [Required] public string Password { get; set; } Property Value string"
  },
  "api/Azorian.Models.RegisterRequest.html": {
    "href": "api/Azorian.Models.RegisterRequest.html",
    "title": "Class RegisterRequest | Azorian",
    "summary": "Class RegisterRequest Namespace Azorian.Models Assembly Azorian.dll Registration request payload. public class RegisterRequest Inheritance object RegisterRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Email address. [Required] [EmailAddress] public string Email { get; set; } Property Value string FirstName First name. [MaxLength(100)] public string FirstName { get; set; } Property Value string LastName Last name. [MaxLength(100)] public string LastName { get; set; } Property Value string Password Password. [Required] public string Password { get; set; } Property Value string UserName Desired username. [Required] [MaxLength(100)] public string UserName { get; set; } Property Value string"
  },
  "api/Azorian.Models.ReverseTextRequest.html": {
    "href": "api/Azorian.Models.ReverseTextRequest.html",
    "title": "Class ReverseTextRequest | Azorian",
    "summary": "Class ReverseTextRequest Namespace Azorian.Models Assembly Azorian.dll Request payload for text reversal. public class ReverseTextRequest Inheritance object ReverseTextRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Text The input text to reverse. public string? Text { get; set; } Property Value string"
  },
  "api/Azorian.Models.ReverseTextResponse.html": {
    "href": "api/Azorian.Models.ReverseTextResponse.html",
    "title": "Class ReverseTextResponse | Azorian",
    "summary": "Class ReverseTextResponse Namespace Azorian.Models Assembly Azorian.dll Response payload containing reversed text. public class ReverseTextResponse Inheritance object ReverseTextResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Reversed The reversed version of the input text. public string? Reversed { get; set; } Property Value string"
  },
  "api/Azorian.Models.User.html": {
    "href": "api/Azorian.Models.User.html",
    "title": "Class User | Azorian",
    "summary": "Class User Namespace Azorian.Models Assembly Azorian.dll Application user entity. public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Date the user was created. public DateTime CreatedAt { get; set; } Property Value DateTime Email User email address. [Required] [EmailAddress] public string Email { get; set; } Property Value string FirstName User first name. [MaxLength(100)] public string FirstName { get; set; } Property Value string Id Primary identifier. public Guid Id { get; set; } Property Value Guid IsBanned public bool IsBanned { get; set; } Property Value bool IsSuspended public bool IsSuspended { get; set; } Property Value bool LastName User last name. [MaxLength(100)] public string LastName { get; set; } Property Value string PasswordHash Hashed password. [Required] public string PasswordHash { get; set; } Property Value string Role User role for authorization. [MaxLength(50)] public string Role { get; set; } Property Value string Status Account status. public UserStatus Status { get; set; } Property Value UserStatus UpdatedAt Date the user was last updated. public DateTime? UpdatedAt { get; set; } Property Value DateTime? UserName Unique username. [Required] [MaxLength(100)] public string UserName { get; set; } Property Value string"
  },
  "api/Azorian.Models.UserCredentials.html": {
    "href": "api/Azorian.Models.UserCredentials.html",
    "title": "Class UserCredentials | Azorian",
    "summary": "Class UserCredentials Namespace Azorian.Models Assembly Azorian.dll Represents user credentials submitted for registration or authentication. public class UserCredentials Inheritance object UserCredentials Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password Gets or sets the plain-text password. This value is only used transiently for registration or login and is never stored. public string Password { get; set; } Property Value string Username Gets or sets the username. public string Username { get; set; } Property Value string"
  },
  "api/Azorian.Models.UserDto.html": {
    "href": "api/Azorian.Models.UserDto.html",
    "title": "Class UserDto | Azorian",
    "summary": "Class UserDto Namespace Azorian.Models Assembly Azorian.dll Data transfer object returned from user-related endpoints. public class UserDto Inheritance object UserDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the unique identifier of the user. public Guid Id { get; set; } Property Value Guid IsBanned Gets or sets a value indicating whether the user is banned. public bool IsBanned { get; set; } Property Value bool IsSuspended Gets or sets a value indicating whether the user is suspended. public bool IsSuspended { get; set; } Property Value bool Username Gets or sets the username. public string Username { get; set; } Property Value string"
  },
  "api/Azorian.Models.UserStatus.html": {
    "href": "api/Azorian.Models.UserStatus.html",
    "title": "Enum UserStatus | Azorian",
    "summary": "Enum UserStatus Namespace Azorian.Models Assembly Azorian.dll Represents the status of a user account. public enum UserStatus Fields Active = 0 Active user. Banned = 2 User is banned. Suspended = 1 User is suspended."
  },
  "api/Azorian.Models.html": {
    "href": "api/Azorian.Models.html",
    "title": "Namespace Azorian.Models | Azorian",
    "summary": "Namespace Azorian.Models Classes LoginRequest Login request payload. RegisterRequest Registration request payload. User Application user entity. UserCredentials Represents user credentials submitted for registration or authentication. UserDto Data transfer object returned from user-related endpoints. Enums UserStatus Represents the status of a user account."
  },
  "api/Azorian.Services.IUserService.html": {
    "href": "api/Azorian.Services.IUserService.html",
    "title": "Interface IUserService | Azorian",
    "summary": "Interface IUserService Namespace Azorian.Services Assembly Azorian.dll Defines operations for managing application users. public interface IUserService Methods Authenticate(UserCredentials) Attempts to authenticate a user with the given credentials. User? Authenticate(UserCredentials credentials) Parameters credentials UserCredentials The username and password. Returns User The authenticated User or null. Ban(Guid) Marks a user as banned. bool Ban(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was banned. Create(UserCredentials) Creates a new user with the specified credentials. User Create(UserCredentials credentials) Parameters credentials UserCredentials The username and plain-text password. Returns User The created User. Delete(Guid) Deletes a user from the system. bool Delete(Guid id) Parameters id Guid The user's identifier. Returns bool true if the user was removed; otherwise false. GetAll() Retrieves all users in the system. IEnumerable<User> GetAll() Returns IEnumerable<User> A sequence of User objects. GetById(Guid) Retrieves a user by identifier. User? GetById(Guid id) Parameters id Guid The user's unique identifier. Returns User The matching User or null if not found. Suspend(Guid) Marks a user as suspended. bool Suspend(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was suspended. Unban(Guid) Removes the banned status from a user. bool Unban(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was unbanned. Unsuspend(Guid) Removes the suspended status from a user. bool Unsuspend(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was unsuspended. Update(User) Updates an existing user. bool Update(User user) Parameters user User User information to update. Returns bool true if the user exists and was updated; otherwise false."
  },
  "api/Azorian.Services.InMemoryUserService.html": {
    "href": "api/Azorian.Services.InMemoryUserService.html",
    "title": "Class InMemoryUserService | Azorian",
    "summary": "Class InMemoryUserService Namespace Azorian.Services Assembly Azorian.dll Provides an in-memory implementation of IUserService. This implementation is intended for demo or testing purposes only. public class InMemoryUserService : IUserService Inheritance object InMemoryUserService Implements IUserService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Authenticate(UserCredentials) Attempts to authenticate a user with the given credentials. public User? Authenticate(UserCredentials credentials) Parameters credentials UserCredentials The username and password. Returns User The authenticated User or null. Ban(Guid) Marks a user as banned. public bool Ban(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was banned. Create(UserCredentials) Creates a new user with the specified credentials. public User Create(UserCredentials credentials) Parameters credentials UserCredentials The username and plain-text password. Returns User The created User. Delete(Guid) Deletes a user from the system. public bool Delete(Guid id) Parameters id Guid The user's identifier. Returns bool true if the user was removed; otherwise false. GetAll() Retrieves all users in the system. public IEnumerable<User> GetAll() Returns IEnumerable<User> A sequence of User objects. GetById(Guid) Retrieves a user by identifier. public User? GetById(Guid id) Parameters id Guid The user's unique identifier. Returns User The matching User or null if not found. Suspend(Guid) Marks a user as suspended. public bool Suspend(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was suspended. Unban(Guid) Removes the banned status from a user. public bool Unban(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was unbanned. Unsuspend(Guid) Removes the suspended status from a user. public bool Unsuspend(Guid id) Parameters id Guid The user identifier. Returns bool true if the user exists and was unsuspended. Update(User) Updates an existing user. public bool Update(User user) Parameters user User User information to update. Returns bool true if the user exists and was updated; otherwise false."
  },
  "api/Azorian.Services.TextProcessor.html": {
    "href": "api/Azorian.Services.TextProcessor.html",
    "title": "Class TextProcessor | Azorian",
    "summary": "Class TextProcessor Namespace Azorian.Services Assembly Azorian.dll Provides text manipulation utilities. public class TextProcessor Inheritance object TextProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Reverse(string) Reverses the characters in the given input string. public string Reverse(string input) Parameters input string The string to reverse. Returns string The reversed string."
  },
  "api/Azorian.Services.TokenService.html": {
    "href": "api/Azorian.Services.TokenService.html",
    "title": "Class TokenService | Azorian",
    "summary": "Class TokenService Namespace Azorian.Services Assembly Azorian.dll Generates JSON Web Tokens for authenticated users. public class TokenService Inheritance object TokenService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TokenService(IConfiguration) Initializes a new instance of the TokenService class. public TokenService(IConfiguration config) Parameters config IConfiguration Application configuration. Methods GenerateToken(User) Generates a signed JWT for the specified user. public string GenerateToken(User user) Parameters user User Authenticated user. Returns string Signed JWT string."
  },
  "api/Azorian.Services.html": {
    "href": "api/Azorian.Services.html",
    "title": "Namespace Azorian.Services | Azorian",
    "summary": "Namespace Azorian.Services Classes InMemoryUserService Provides an in-memory implementation of IUserService. This implementation is intended for demo or testing purposes only. TokenService Generates JSON Web Tokens for authenticated users. Interfaces IUserService Defines operations for managing application users."
  },
  "api/Azorian.WeatherForecast.html": {
    "href": "api/Azorian.WeatherForecast.html",
    "title": "Class WeatherForecast | Azorian",
    "summary": "Class WeatherForecast Namespace Azorian Assembly Azorian.dll public class WeatherForecast Inheritance object WeatherForecast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date public DateOnly Date { get; set; } Property Value DateOnly Summary public string? Summary { get; set; } Property Value string TemperatureC public int TemperatureC { get; set; } Property Value int TemperatureF public int TemperatureF { get; } Property Value int"
  },
  "api/Azorian.html": {
    "href": "api/Azorian.html",
    "title": "Namespace Azorian | Azorian",
    "summary": "Namespace Azorian Classes WeatherForecast"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Azorian",
    "summary": "Getting Started Do not trust the jews."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Azorian",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Azorian API | Azorian",
    "summary": "Welcome to the Azorian API This project provides a simple example API including: Weather forecasting sample endpoint. Full BREAD operations for managing users. Registration and authentication with JWT bearer tokens. Administrative endpoints to suspend or ban users. All HTTP endpoints are served under the /1 path prefix. For example, the users endpoint can be reached at GET /1/users. Refer to Markdown for how to write markdown files. Quick Start Notes Add images to the images folder if the file is referencing an image."
  }
}